name: Deploy Docusaurus

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: yarn install

      - name: Build Docusaurus
        run: yarn build

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.WEBSITE_PRIVATE_KEY }}
          USER: ${{ secrets.WEBSITE_SSH_USER }}
          HOST: ${{ secrets.WEBSITE_SSH_HOST }}
          PORT: ${{ secrets.WEBSITE_SSH_PORT }}
        run: |
          # Create temporary SSH directory
          SSH_DIR=$(mktemp -d)
          echo "$SSH_PRIVATE_KEY" > "$SSH_DIR/id_rsa"
          chmod 600 "$SSH_DIR/id_rsa"
          
          # Setup SSH config with strict options
          ssh-keyscan -p $PORT -H "$HOST" > "$SSH_DIR/known_hosts"
          
          # Create temp directory on remote server and transfer new files
          ssh -p $PORT -i "$SSH_DIR/id_rsa" -o UserKnownHostsFile="$SSH_DIR/known_hosts" \
              $USER@$HOST "mkdir -p ~/docs_temp"
          
          if ! scp -P $PORT -i "$SSH_DIR/id_rsa" -o UserKnownHostsFile="$SSH_DIR/known_hosts" \
              -r build/* $USER@$HOST:~/docs_temp/; then
            echo "Failed to transfer files"
            rm -rf "$SSH_DIR" ~/docs_temp
            exit 1
          fi
          
          # Create backup and perform atomic directory swap
          ssh -p $PORT -i "$SSH_DIR/id_rsa" -o UserKnownHostsFile="$SSH_DIR/known_hosts" \
              $USER@$HOST "cd ~ && \
              tar czf docs_backup_\$(date +%Y%m%d_%H%M%S).tar.gz docs/ && \
              ls -t docs_backup_*.tar.gz | tail -n +3 | xargs rm -f || true && \
              mv docs docs_old && \
              mv docs_temp docs && \
              rm -rf docs_old"
          
          # Cleanup sensitive files
          rm -rf "$SSH_DIR"